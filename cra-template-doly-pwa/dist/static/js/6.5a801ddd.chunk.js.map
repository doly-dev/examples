{"version":3,"sources":["pages/repos/List.tsx","utils/storage.ts","utils/request.ts","services/repos.ts"],"names":["Item","Brief","ListPage","history","useHistory","useAsync","getReposList","persisted","cacheKey","data","run","loading","error","style","margin","textAlign","onClick","display","alignItems","justifyContent","type","marginRight","renderHeader","length","map","name","description","arrow","multipleLine","push","session","store","namespace","tokenKey","request","url","options","headersToken","restOptions","headers","get","axios","baseURL","process","method","then","res","catch","err","Promise","reject","a","getReposByName"],"mappings":"uOAMQA,EAAR,IAAQA,KACAC,EAAUD,EAAVC,MAsCOC,UApCY,WACzB,IAAMC,EAAUC,cAChB,EAAsCC,YAASC,IAAc,CAC3DC,WAAW,EACXC,SAAU,eAFJC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,QAKnB,OALA,EAA4BC,MAMnB,qBAAKC,MAAO,CAAEC,OAAQ,GAAIC,UAAW,UAArC,SAAiD,mBAAGC,QAASN,EAAZ,kFAGtDC,EACK,sBAAKE,MAAO,CAAEI,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUL,OAAQ,IAAvF,UAA6F,mBAAMM,KAAK,UAAUP,MAAO,CAAEQ,YAAa,KAAxI,2BAIP,mBAAMC,aAAc,iBAAM,YAA1B,SAEIb,GAAQA,EAAKc,OAAS,GAAKd,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OAClC,eAAC1B,EAAD,CAEE2B,MAAM,aACNC,cAAY,EACZZ,QAAS,WACPb,EAAQ0B,KAAR,wBAA8BJ,KALlC,UAQGA,EACD,cAACxB,EAAD,UAAQyB,MARHD,U,qLCzBTK,E,OAAYC,EAAMC,UAAU,qBAA5BF,QAEFG,EAAW,iBCsCFC,MA9Bf,SAA0BC,EAAgCC,GACxD,MAAgDA,GAAW,GAA3D,IAAQC,oBAAR,SAAgCC,EAAhC,gCAEMC,EAAO,2BACPF,EAAY,eAdM,gBDIIP,EAAQU,IAAIP,ICahC,IACHK,EAAYC,SAGjB,OAAOE,IAAM,yBACXN,MACAO,QAASC,GACTC,OAAQ,QACLN,GAJO,IAKVC,aAECM,MAAK,SAACC,GAGL,OAAOA,EAAIrC,QAEZsC,OAAM,SAACC,GAGN,OAAOC,QAAQC,OAAOF,OCtCrB,SAAe1C,IAAtB,+B,4CAAO,sBAAA6C,EAAA,+EAEEjB,EAAQ,8CAA+C,CAC5DU,OAAQ,SAHL,4C,sBAOA,SAAeQ,EAAtB,kC,4CAAO,WAA8B3B,GAA9B,SAAA0B,EAAA,+EAEEjB,EAAQ,yCAAD,OAA0CT,GAAQ,CAC9DmB,OAAQ,SAHL,4C","file":"static/js/6.5a801ddd.chunk.js","sourcesContent":["import * as React from 'react';\nimport { List, Icon } from 'antd-mobile';\nimport { useAsync } from 'rc-hooks';\nimport { useHistory } from 'react-router-dom';\nimport { getReposList } from '@/services/repos';\n\nconst { Item } = List;\nconst { Brief } = Item;\n\nconst ListPage: React.FC = () => {\n  const history = useHistory();\n  const { data, run, loading, error } = useAsync(getReposList, {\n    persisted: true,\n    cacheKey: \"repos_list\"\n  });\n\n  if (error) {\n    return <div style={{ margin: 50, textAlign: 'center' }}><a onClick={run}>加载失败，点击重新加载</a></div>\n  }\n\n  if (loading) {\n    return <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', margin: 15 }}><Icon type=\"loading\" style={{ marginRight: 5 }} />加载中...</div>\n  }\n\n  return (\n    <List renderHeader={() => 'doly-dev'}>\n      {\n        data && data.length > 0 && data.map(({ name, description }: any) => (\n          <Item\n            key={name}\n            arrow=\"horizontal\"\n            multipleLine\n            onClick={() => {\n              history.push(`/repos/detail/${name}`);\n            }}\n          >\n            {name}\n            <Brief>{description}</Brief>\n          </Item>\n        ))\n      }\n    </List>\n  );\n};\n\nexport default ListPage;\n","import store from 'store2';\n\ntype StoraNameSpaceType = store.StoreAPI & { session: store.StoreAPI };\n\nconst { session } = store.namespace('cra-template-doly') as StoraNameSpaceType; // 改为项目名\n\nconst tokenKey = 'loginTokenName'; // 登录token\n\nexport const getToken = () => session.get(tokenKey);\nexport const setToken = (data: any) => session.set(tokenKey, data);\nexport const removeToken = () => session.remove(tokenKey);\n\nexport const clearAll = () => session.clearAll();\n\nexport default session;\n","import axios from 'axios';\nimport type { AxiosRequestConfig } from 'axios';\nimport { getToken } from '@/utils/storage';\n\nconst HEADER_TOKEN_NAME = 'Authorization'; // 请求头token名称\n\ninterface RequestOptions extends Omit<AxiosRequestConfig, 'url'> {\n  headersToken?: boolean; // 请求头是否添加登录token\n}\n\n/**\n * 可在该模块编写部分业务逻辑，如请求头token，请求失败/登录过期/服务错误等处理\n * axios 文档：https://github.com/axios/axios#request-config\n */\nfunction request<T = any>(url: AxiosRequestConfig['url'], options?: RequestOptions): Promise<T> {\n  const { headersToken = true, ...restOptions } = options || {};\n\n  const headers = {\n    ...(headersToken\n      ? {\n        [HEADER_TOKEN_NAME]: getToken(),\n      } : {}),\n    ...restOptions.headers,\n  };\n\n  return axios({\n    url,\n    baseURL: process.env.REACT_APP_API, // REACT_APP_API 通过环境变量设置\n    method: 'POST',\n    ...restOptions,\n    headers,\n  })\n    .then((res) => {\n      // 请求成功处理，一般会有其他逻辑处理。如登录过期、特殊responseCode等\n\n      return res.data;\n    })\n    .catch((err) => {\n      // 请求失败处理，一般是全局错误提示\n\n      return Promise.reject(err);\n    });\n}\n\nexport default request;\n","import request from '@/utils/request';\n\nexport async function getReposList() {\n  // return request<API.ReposList>('/users/doly-dev/repos', {\n  return request('https://api.github.com/users/doly-dev/repos', {\n    method: 'GET'\n  });\n}\n\nexport async function getReposByName(name: string) {\n  // return request<API.ReposDetail>(`/repos/doly-dev/${name}`, {\n  return request(`https://api.github.com/repos/doly-dev/${name}`, {\n    method: 'GET'\n  });\n}\n"],"sourceRoot":""}